//
// Software Name: OUDS Android
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Software description: Android library of reusable graphical components
//

// Orange brand tokens version 1.3.0
// Generated by Tokenator

package com.orange.ouds.theme.orange.tokens.components

import com.orange.ouds.theme.tokens.components.OudsSwitchTokens
import com.orange.ouds.theme.tokens.OudsBorderKeyToken
import com.orange.ouds.theme.tokens.OudsColorKeyToken
import com.orange.ouds.theme.tokens.OudsLightDarkColorKeyToken
import com.orange.ouds.theme.tokens.OudsOpacityKeyToken
import com.orange.ouds.theme.tokens.OudsSizeKeyToken
import com.orange.ouds.theme.tokens.OudsSpaceKeyToken
import com.orange.ouds.tokens.raw.DimensionRawTokens

data class OrangeSwitchTokens(
    override val borderRadiusCursor: OudsBorderKeyToken.Radius = OudsBorderKeyToken.Radius.Pill,
    override val borderRadiusTrack: OudsBorderKeyToken.Radius = OudsBorderKeyToken.Radius.Pill,
    override val colorCheck: OudsColorKeyToken = OudsColorKeyToken.Content.Default,
    override val colorCheckInteraction: OudsColorKeyToken = OudsColorKeyToken.Content.Default,
    override val colorCursor: OudsColorKeyToken = OudsLightDarkColorKeyToken(OudsColorKeyToken.Repository.Neutral.Muted.White, OudsColorKeyToken.Repository.Neutral.Emphasized.Highest),
    override val colorTrackSelected: OudsColorKeyToken = OudsLightDarkColorKeyToken(OudsColorKeyToken.Repository.Positive.Default, OudsColorKeyToken.Repository.Positive.High),
    override val colorTrackSelectedInteraction: OudsColorKeyToken = OudsLightDarkColorKeyToken(OudsColorKeyToken.Repository.Positive.High, OudsColorKeyToken.Repository.Positive.Low),
    override val colorTrackUnselected: OudsColorKeyToken = OudsLightDarkColorKeyToken(OudsColorKeyToken.Repository.Opacity.Black.MediumHigh, OudsColorKeyToken.Repository.Opacity.White.High),
    override val colorTrackUnselectedInteraction: OudsColorKeyToken = OudsLightDarkColorKeyToken(OudsColorKeyToken.Repository.Opacity.Black.High, OudsColorKeyToken.Repository.Opacity.White.Higher),
    override val opacityCheck: OudsOpacityKeyToken = OudsOpacityKeyToken.Opaque,
    override val sizeHeightCursorSelected: Float = DimensionRawTokens.dimension300,
    override val sizeHeightCursorUnselected: Float = DimensionRawTokens.dimension200,
    override val sizeHeightTrack: Float = DimensionRawTokens.dimension400,
    override val sizeMaxHeight: Float = DimensionRawTokens.dimension400,
    override val sizeMinHeight: Float = DimensionRawTokens.dimension400,
    override val sizeMinHeightInteractiveArea: OudsSizeKeyToken = OudsSizeKeyToken.MinInteractiveArea,
    override val sizeMinWidth: Float = DimensionRawTokens.dimension700,
    override val sizeWidthCursorSelected: Float = DimensionRawTokens.dimension300,
    override val sizeWidthCursorSelectedPressed: Float = DimensionRawTokens.dimension400,
    override val sizeWidthCursorUnselected: Float = DimensionRawTokens.dimension200,
    override val sizeWidthCursorUnselectedPressed: Float = DimensionRawTokens.dimension300,
    override val sizeWidthTrack: Float = DimensionRawTokens.dimension700,
    override val spacePaddingInlineSelected: OudsSpaceKeyToken.PaddingInline = OudsSpaceKeyToken.PaddingInline.ThreeExtraSmall,
    override val spacePaddingInlineUnselected: OudsSpaceKeyToken.PaddingInline = OudsSpaceKeyToken.PaddingInline.ExtraSmall
) : OudsSwitchTokens

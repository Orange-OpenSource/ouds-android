//
// Software Name: OUDS Android
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Software description: Android library of reusable graphical components
//

// Orange brand tokens version 2.0.0
// Generated by Tokenator

package com.orange.ouds.theme.orange.tokens.components

import com.orange.ouds.theme.tokens.components.OudsChipTokens
import com.orange.ouds.theme.tokens.OudsBorderKeyToken
import com.orange.ouds.theme.tokens.OudsColorKeyToken
import com.orange.ouds.theme.tokens.OudsSizeKeyToken
import com.orange.ouds.theme.tokens.OudsSpaceKeyToken
import com.orange.ouds.tokens.raw.DimensionRawTokens

data class OrangeChipTokens(
    override val badgeColorBg: OudsColorKeyToken = OudsColorKeyToken.Surface.InverseHigh,
    override val badgeColorContent: OudsColorKeyToken = OudsColorKeyToken.Content.Inverse,
    override val borderRadius: OudsBorderKeyToken.Radius = OudsBorderKeyToken.Radius.Pill,
    override val borderWidthSelected: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    override val borderWidthUnselected: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Default,
    override val borderWidthUnselectedInteraction: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    override val colorBgSelectedDisabled: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgSelectedEnabled: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgSelectedFocus: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgSelectedHover: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgSelectedPressed: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgUnselectedDisabled: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgUnselectedEnabled: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgUnselectedFocus: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgUnselectedHover: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBgUnselectedPressed: OudsColorKeyToken = OudsColorKeyToken.Opacity.Transparent,
    override val colorBorderSelectedDisabled: OudsColorKeyToken = OudsColorKeyToken.Action.Disabled,
    override val colorBorderSelectedEnabled: OudsColorKeyToken = OudsColorKeyToken.Action.Selected,
    override val colorBorderSelectedFocus: OudsColorKeyToken = OudsColorKeyToken.Action.Focus,
    override val colorBorderSelectedHover: OudsColorKeyToken = OudsColorKeyToken.Action.Hover,
    override val colorBorderSelectedPressed: OudsColorKeyToken = OudsColorKeyToken.Action.Pressed,
    override val colorBorderUnselectedDisabled: OudsColorKeyToken = OudsColorKeyToken.Action.Disabled,
    override val colorBorderUnselectedEnabled: OudsColorKeyToken = OudsColorKeyToken.Border.Default,
    override val colorBorderUnselectedFocus: OudsColorKeyToken = OudsColorKeyToken.Action.Focus,
    override val colorBorderUnselectedHover: OudsColorKeyToken = OudsColorKeyToken.Action.Hover,
    override val colorBorderUnselectedPressed: OudsColorKeyToken = OudsColorKeyToken.Action.Pressed,
    override val colorContentSelectedDisabled: OudsColorKeyToken = OudsColorKeyToken.Action.Disabled,
    override val colorContentSelectedEnabled: OudsColorKeyToken = OudsColorKeyToken.Action.Enabled,
    override val colorContentSelectedFocus: OudsColorKeyToken = OudsColorKeyToken.Action.Focus,
    override val colorContentSelectedHover: OudsColorKeyToken = OudsColorKeyToken.Action.Hover,
    override val colorContentSelectedPressed: OudsColorKeyToken = OudsColorKeyToken.Action.Pressed,
    override val colorContentSelectedTickEnabled: OudsColorKeyToken = OudsColorKeyToken.Action.Selected,
    override val colorContentUnselectedDisabled: OudsColorKeyToken = OudsColorKeyToken.Action.Disabled,
    override val colorContentUnselectedEnabled: OudsColorKeyToken = OudsColorKeyToken.Action.Enabled,
    override val colorContentUnselectedFocus: OudsColorKeyToken = OudsColorKeyToken.Action.Focus,
    override val colorContentUnselectedHover: OudsColorKeyToken = OudsColorKeyToken.Action.Hover,
    override val colorContentUnselectedPressed: OudsColorKeyToken = OudsColorKeyToken.Action.Pressed,
    override val sizeIcon: OudsSizeKeyToken.Icon = OudsSizeKeyToken.Icon.WithLabel.Medium.SizeSmall,
    override val sizeMinHeight: Float = DimensionRawTokens.dimension400,
    override val sizeMinHeightInteractiveArea: OudsSizeKeyToken = OudsSizeKeyToken.MinInteractiveArea,
    override val sizeMinWidth: Float = DimensionRawTokens.dimension650,
    override val spaceColumnGapBadgeChevron: OudsSpaceKeyToken.ColumnGap = OudsSpaceKeyToken.ColumnGap.TwoExtraSmall,
    override val spaceColumnGapIcon: OudsSpaceKeyToken.ColumnGap = OudsSpaceKeyToken.ColumnGap.ExtraSmall,
    override val spacePaddingBlock: OudsSpaceKeyToken.PaddingBlock = OudsSpaceKeyToken.PaddingBlock.TwoExtraSmall,
    override val spacePaddingBlockIconOnly: OudsSpaceKeyToken.PaddingBlock = OudsSpaceKeyToken.PaddingBlock.ExtraSmall,
    override val spacePaddingInlineBadgeStart: OudsSpaceKeyToken.PaddingInline = OudsSpaceKeyToken.PaddingInline.FourExtraSmall,
    override val spacePaddingInlineChevronEnd: OudsSpaceKeyToken.PaddingInline = OudsSpaceKeyToken.PaddingInline.ExtraSmall,
    override val spacePaddingInlineIcon: OudsSpaceKeyToken.PaddingInline = OudsSpaceKeyToken.PaddingInline.Small,
    override val spacePaddingInlineIconNone: OudsSpaceKeyToken.PaddingInline = OudsSpaceKeyToken.PaddingInline.Large
) : OudsChipTokens

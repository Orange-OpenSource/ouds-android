/*
 * Software Name: OUDS Android
 * SPDX-FileCopyrightText: Copyright (c) Orange SA
 * SPDX-License-Identifier: MIT
 *
 * This software is distributed under the MIT license,
 * the text of which is available at https://opensource.org/license/MIT/
 * or see the "LICENSE" file for more details.
 *
 * Software description: Android library of reusable graphical components
 */

package com.orange.ouds.theme.tokens.semantic

import androidx.compose.material3.ColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color
import com.orange.ouds.theme.OudsColorScheme

class OudsColorTokens(
    val primary: OudsColorTokenValue,
    val onPrimary: OudsColorTokenValue,
    val primaryContainer: OudsColorTokenValue,
    val onPrimaryContainer: OudsColorTokenValue,
    val inversePrimary: OudsColorTokenValue,
    val secondary: OudsColorTokenValue,
    val onSecondary: OudsColorTokenValue,
    val secondaryContainer: OudsColorTokenValue,
    val onSecondaryContainer: OudsColorTokenValue,
    val tertiary: OudsColorTokenValue,
    val onTertiary: OudsColorTokenValue,
    val tertiaryContainer: OudsColorTokenValue,
    val onTertiaryContainer: OudsColorTokenValue,
    val background: OudsColorTokenValue,
    val onBackground: OudsColorTokenValue,
    val surface: OudsColorTokenValue,
    val onSurface: OudsColorTokenValue,
    val surfaceVariant: OudsColorTokenValue,
    val onSurfaceVariant: OudsColorTokenValue,
    val surfaceTint: OudsColorTokenValue,
    val inverseSurface: OudsColorTokenValue,
    val inverseOnSurface: OudsColorTokenValue,
    val error: OudsColorTokenValue,
    val onError: OudsColorTokenValue,
    val errorContainer: OudsColorTokenValue,
    val onErrorContainer: OudsColorTokenValue,
    val outline: OudsColorTokenValue,
    val outlineVariant: OudsColorTokenValue,
    val scrim: OudsColorTokenValue,
    val positive: OudsColorTokenValue,
    val onPositive: OudsColorTokenValue,
    val negative: OudsColorTokenValue,
    val onNegative: OudsColorTokenValue,
    val info: OudsColorTokenValue,
    val alert: OudsColorTokenValue,
) {

    val lightColorScheme: OudsColorScheme
        get() = OudsColorScheme(
            primary = primary.light,
            onPrimary = onPrimary.light,
            primaryContainer = primaryContainer.light,
            onPrimaryContainer = onPrimaryContainer.light,
            inversePrimary = inversePrimary.light,
            secondary = secondary.light,
            onSecondary = onSecondary.light,
            secondaryContainer = secondaryContainer.light,
            onSecondaryContainer = onSecondaryContainer.light,
            tertiary = tertiary.light,
            onTertiary = onTertiary.light,
            tertiaryContainer = tertiaryContainer.light,
            onTertiaryContainer = onTertiaryContainer.light,
            background = background.light,
            onBackground = onBackground.light,
            surface = surface.light,
            onSurface = onSurface.light,
            surfaceVariant = surfaceVariant.light,
            onSurfaceVariant = onSurfaceVariant.light,
            surfaceTint = surfaceTint.light,
            inverseSurface = inverseSurface.light,
            inverseOnSurface = inverseOnSurface.light,
            error = error.light,
            onError = onError.light,
            errorContainer = errorContainer.light,
            onErrorContainer = onErrorContainer.light,
            outline = outline.light,
            outlineVariant = outlineVariant.light,
            scrim = scrim.light,
            positive = positive.light,
            onPositive = onPositive.light,
            negative = negative.light,
            onNegative = onNegative.light,
            info = info.light,
            alert = alert.light
        )

    val darkColorScheme: OudsColorScheme
        get() = OudsColorScheme(
            primary = primary.dark,
            onPrimary = onPrimary.dark,
            primaryContainer = primaryContainer.dark,
            onPrimaryContainer = onPrimaryContainer.dark,
            inversePrimary = inversePrimary.dark,
            secondary = secondary.dark,
            onSecondary = onSecondary.dark,
            secondaryContainer = secondaryContainer.dark,
            onSecondaryContainer = onSecondaryContainer.dark,
            tertiary = tertiary.dark,
            onTertiary = onTertiary.dark,
            tertiaryContainer = tertiaryContainer.dark,
            onTertiaryContainer = onTertiaryContainer.dark,
            background = background.dark,
            onBackground = onBackground.dark,
            surface = surface.dark,
            onSurface = onSurface.dark,
            surfaceVariant = surfaceVariant.dark,
            onSurfaceVariant = onSurfaceVariant.dark,
            surfaceTint = surfaceTint.dark,
            inverseSurface = inverseSurface.dark,
            inverseOnSurface = inverseOnSurface.dark,
            error = error.dark,
            onError = onError.dark,
            errorContainer = errorContainer.dark,
            onErrorContainer = onErrorContainer.dark,
            outline = outline.dark,
            outlineVariant = outlineVariant.dark,
            scrim = scrim.dark,
            positive = positive.dark,
            onPositive = onPositive.dark,
            negative = negative.dark,
            onNegative = onNegative.dark,
            info = info.dark,
            alert = alert.dark
        )

    val materialLightColorScheme: ColorScheme
        get() = lightColorScheme(
            primary = primary.light,
            onPrimary = onPrimary.light,
            primaryContainer = primaryContainer.light,
            onPrimaryContainer = onPrimaryContainer.light,
            inversePrimary = inversePrimary.light,
            secondary = secondary.light,
            onSecondary = onSecondary.light,
            secondaryContainer = secondaryContainer.light,
            onSecondaryContainer = onSecondaryContainer.light,
            tertiary = tertiary.light,
            onTertiary = onTertiary.light,
            tertiaryContainer = tertiaryContainer.light,
            onTertiaryContainer = onTertiaryContainer.light,
            background = background.light,
            onBackground = onBackground.light,
            surface = surface.light,
            onSurface = onSurface.light,
            surfaceVariant = surfaceVariant.light,
            onSurfaceVariant = onSurfaceVariant.light,
            surfaceTint = surfaceTint.light,
            inverseSurface = inverseSurface.light,
            inverseOnSurface = inverseOnSurface.light,
            error = error.light,
            onError = onError.light,
            errorContainer = errorContainer.light,
            onErrorContainer = onErrorContainer.light,
            outline = outline.light,
            outlineVariant = outlineVariant.light,
            scrim = scrim.light,
        )

    val materialDarkColorScheme: ColorScheme
        get() = darkColorScheme(
            primary = primary.dark,
            onPrimary = onPrimary.dark,
            primaryContainer = primaryContainer.dark,
            onPrimaryContainer = onPrimaryContainer.dark,
            inversePrimary = inversePrimary.dark,
            secondary = secondary.dark,
            onSecondary = onSecondary.dark,
            secondaryContainer = secondaryContainer.dark,
            onSecondaryContainer = onSecondaryContainer.dark,
            tertiary = tertiary.dark,
            onTertiary = onTertiary.dark,
            tertiaryContainer = tertiaryContainer.dark,
            onTertiaryContainer = onTertiaryContainer.dark,
            background = background.dark,
            onBackground = onBackground.dark,
            surface = surface.dark,
            onSurface = onSurface.dark,
            surfaceVariant = surfaceVariant.dark,
            onSurfaceVariant = onSurfaceVariant.dark,
            surfaceTint = surfaceTint.dark,
            inverseSurface = inverseSurface.dark,
            inverseOnSurface = inverseOnSurface.dark,
            error = error.dark,
            onError = onError.dark,
            errorContainer = errorContainer.dark,
            onErrorContainer = onErrorContainer.dark,
            outline = outline.dark,
            outlineVariant = outlineVariant.dark,
            scrim = scrim.dark,
        )

    /** Returns a copy of this OudsColorTokens, optionally overriding some of the values. */
    fun copy(
        primary: OudsColorTokenValue = this.primary,
        onPrimary: OudsColorTokenValue = this.onPrimary,
        primaryContainer: OudsColorTokenValue = this.primaryContainer,
        onPrimaryContainer: OudsColorTokenValue = this.onPrimaryContainer,
        inversePrimary: OudsColorTokenValue = this.inversePrimary,
        secondary: OudsColorTokenValue = this.secondary,
        onSecondary: OudsColorTokenValue = this.onSecondary,
        secondaryContainer: OudsColorTokenValue = this.secondaryContainer,
        onSecondaryContainer: OudsColorTokenValue = this.onSecondaryContainer,
        tertiary: OudsColorTokenValue = this.tertiary,
        onTertiary: OudsColorTokenValue = this.onTertiary,
        tertiaryContainer: OudsColorTokenValue = this.tertiaryContainer,
        onTertiaryContainer: OudsColorTokenValue = this.onTertiaryContainer,
        background: OudsColorTokenValue = this.background,
        onBackground: OudsColorTokenValue = this.onBackground,
        surface: OudsColorTokenValue = this.surface,
        onSurface: OudsColorTokenValue = this.onSurface,
        surfaceVariant: OudsColorTokenValue = this.surfaceVariant,
        onSurfaceVariant: OudsColorTokenValue = this.onSurfaceVariant,
        surfaceTint: OudsColorTokenValue = this.surfaceTint,
        inverseSurface: OudsColorTokenValue = this.inverseSurface,
        inverseOnSurface: OudsColorTokenValue = this.inverseOnSurface,
        error: OudsColorTokenValue = this.error,
        onError: OudsColorTokenValue = this.onError,
        errorContainer: OudsColorTokenValue = this.errorContainer,
        onErrorContainer: OudsColorTokenValue = this.onErrorContainer,
        outline: OudsColorTokenValue = this.outline,
        outlineVariant: OudsColorTokenValue = this.outlineVariant,
        scrim: OudsColorTokenValue = this.scrim,
        positive: OudsColorTokenValue = this.positive,
        onPositive: OudsColorTokenValue = this.onPositive,
        negative: OudsColorTokenValue = this.negative,
        onNegative: OudsColorTokenValue = this.onNegative,
        info: OudsColorTokenValue = this.info,
        alert: OudsColorTokenValue = this.alert,
    ): OudsColorTokens =
        OudsColorTokens(
            primary = primary,
            onPrimary = onPrimary,
            primaryContainer = primaryContainer,
            onPrimaryContainer = onPrimaryContainer,
            inversePrimary = inversePrimary,
            secondary = secondary,
            onSecondary = onSecondary,
            secondaryContainer = secondaryContainer,
            onSecondaryContainer = onSecondaryContainer,
            tertiary = tertiary,
            onTertiary = onTertiary,
            tertiaryContainer = tertiaryContainer,
            onTertiaryContainer = onTertiaryContainer,
            background = background,
            onBackground = onBackground,
            surface = surface,
            onSurface = onSurface,
            surfaceVariant = surfaceVariant,
            onSurfaceVariant = onSurfaceVariant,
            surfaceTint = surfaceTint,
            inverseSurface = inverseSurface,
            inverseOnSurface = inverseOnSurface,
            error = error,
            onError = onError,
            errorContainer = errorContainer,
            onErrorContainer = onErrorContainer,
            outline = outline,
            outlineVariant = outlineVariant,
            scrim = scrim,
            positive = positive,
            onPositive = onPositive,
            negative = negative,
            onNegative = onNegative,
            info = info,
            alert = alert,
        )
}

data class OudsColorTokenValue(val light: Color, val dark: Color)

enum class OudsColorToken {
    Background,
    Error,
    ErrorContainer,
    InverseOnSurface,
    InversePrimary,
    InverseSurface,
    OnBackground,
    OnError,
    OnErrorContainer,
    OnPrimary,
    OnPrimaryContainer,
    OnSecondary,
    OnSecondaryContainer,
    OnSurface,
    OnSurfaceVariant,
    OnTertiary,
    OnTertiaryContainer,
    Outline,
    OutlineVariant,
    Primary,
    PrimaryContainer,
    Scrim,
    Secondary,
    SecondaryContainer,
    Surface,
    SurfaceTint,
    SurfaceVariant,
    Tertiary,
    TertiaryContainer,
}
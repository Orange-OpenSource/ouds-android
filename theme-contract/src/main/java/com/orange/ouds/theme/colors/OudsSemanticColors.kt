/*
 * Software Name: OUDS Android
 * SPDX-FileCopyrightText: Copyright (c) Orange SA
 * SPDX-License-Identifier: MIT
 *
 * This software is distributed under the MIT license,
 * the text of which is available at https://opensource.org/license/MIT/
 * or see the "LICENSE" file for more details.
 *
 * Software description: Android library of reusable graphical components
 */

package com.orange.ouds.theme.colors

import androidx.compose.material3.ColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color

class OudsSemanticColors(
    var primary: OudsSemanticColorValue,
    var onPrimary: OudsSemanticColorValue,
    var primaryContainer: OudsSemanticColorValue,
    var onPrimaryContainer: OudsSemanticColorValue,
    var inversePrimary: OudsSemanticColorValue,
    var secondary: OudsSemanticColorValue,
    var onSecondary: OudsSemanticColorValue,
    var secondaryContainer: OudsSemanticColorValue,
    var onSecondaryContainer: OudsSemanticColorValue,
    var tertiary: OudsSemanticColorValue,
    var onTertiary: OudsSemanticColorValue,
    var tertiaryContainer: OudsSemanticColorValue,
    var onTertiaryContainer: OudsSemanticColorValue,
    var background: OudsSemanticColorValue,
    var onBackground: OudsSemanticColorValue,
    var surface: OudsSemanticColorValue,
    var onSurface: OudsSemanticColorValue,
    var surfaceVariant: OudsSemanticColorValue,
    var onSurfaceVariant: OudsSemanticColorValue,
    var surfaceTint: OudsSemanticColorValue,
    var inverseSurface: OudsSemanticColorValue,
    var inverseOnSurface: OudsSemanticColorValue,
    var error: OudsSemanticColorValue,
    var onError: OudsSemanticColorValue,
    var errorContainer: OudsSemanticColorValue,
    var onErrorContainer: OudsSemanticColorValue,
    var outline: OudsSemanticColorValue,
    var outlineVariant: OudsSemanticColorValue,
    var scrim: OudsSemanticColorValue,
    var positive: OudsSemanticColorValue,
    var onPositive: OudsSemanticColorValue,
    var negative: OudsSemanticColorValue,
    var onNegative: OudsSemanticColorValue,
    var info: OudsSemanticColorValue,
    var alert: OudsSemanticColorValue,
) {

    val lightColors: OudsColors
        get() = OudsColors(
            primary = primary.light,
            onPrimary = onPrimary.light,
            primaryContainer = primaryContainer.light,
            onPrimaryContainer = onPrimaryContainer.light,
            inversePrimary = inversePrimary.light,
            secondary = secondary.light,
            onSecondary = onSecondary.light,
            secondaryContainer = secondaryContainer.light,
            onSecondaryContainer = onSecondaryContainer.light,
            tertiary = tertiary.light,
            onTertiary = onTertiary.light,
            tertiaryContainer = tertiaryContainer.light,
            onTertiaryContainer = onTertiaryContainer.light,
            background = background.light,
            onBackground = onBackground.light,
            surface = surface.light,
            onSurface = onSurface.light,
            surfaceVariant = surfaceVariant.light,
            onSurfaceVariant = onSurfaceVariant.light,
            surfaceTint = surfaceTint.light,
            inverseSurface = inverseSurface.light,
            inverseOnSurface = inverseOnSurface.light,
            error = error.light,
            onError = onError.light,
            errorContainer = errorContainer.light,
            onErrorContainer = onErrorContainer.light,
            outline = outline.light,
            outlineVariant = outlineVariant.light,
            scrim = scrim.light,
            positive = positive.light,
            onPositive = onPositive.light,
            negative = negative.light,
            onNegative = onNegative.light,
            info = info.light,
            alert = alert.light
        )

    val darkColors: OudsColors
        get() = OudsColors(
            primary = primary.dark,
            onPrimary = onPrimary.dark,
            primaryContainer = primaryContainer.dark,
            onPrimaryContainer = onPrimaryContainer.dark,
            inversePrimary = inversePrimary.dark,
            secondary = secondary.dark,
            onSecondary = onSecondary.dark,
            secondaryContainer = secondaryContainer.dark,
            onSecondaryContainer = onSecondaryContainer.dark,
            tertiary = tertiary.dark,
            onTertiary = onTertiary.dark,
            tertiaryContainer = tertiaryContainer.dark,
            onTertiaryContainer = onTertiaryContainer.dark,
            background = background.dark,
            onBackground = onBackground.dark,
            surface = surface.dark,
            onSurface = onSurface.dark,
            surfaceVariant = surfaceVariant.dark,
            onSurfaceVariant = onSurfaceVariant.dark,
            surfaceTint = surfaceTint.dark,
            inverseSurface = inverseSurface.dark,
            inverseOnSurface = inverseOnSurface.dark,
            error = error.dark,
            onError = onError.dark,
            errorContainer = errorContainer.dark,
            onErrorContainer = onErrorContainer.dark,
            outline = outline.dark,
            outlineVariant = outlineVariant.dark,
            scrim = scrim.dark,
            positive = positive.dark,
            onPositive = onPositive.dark,
            negative = negative.dark,
            onNegative = onNegative.dark,
            info = info.dark,
            alert = alert.dark
        )

    val materialLightColorScheme: ColorScheme
        get() = lightColorScheme(
            primary = primary.light,
            onPrimary = onPrimary.light,
            primaryContainer = primaryContainer.light,
            onPrimaryContainer = onPrimaryContainer.light,
            inversePrimary = inversePrimary.light,
            secondary = secondary.light,
            onSecondary = onSecondary.light,
            secondaryContainer = secondaryContainer.light,
            onSecondaryContainer = onSecondaryContainer.light,
            tertiary = tertiary.light,
            onTertiary = onTertiary.light,
            tertiaryContainer = tertiaryContainer.light,
            onTertiaryContainer = onTertiaryContainer.light,
            background = background.light,
            onBackground = onBackground.light,
            surface = surface.light,
            onSurface = onSurface.light,
            surfaceVariant = surfaceVariant.light,
            onSurfaceVariant = onSurfaceVariant.light,
            surfaceTint = surfaceTint.light,
            inverseSurface = inverseSurface.light,
            inverseOnSurface = inverseOnSurface.light,
            error = error.light,
            onError = onError.light,
            errorContainer = errorContainer.light,
            onErrorContainer = onErrorContainer.light,
            outline = outline.light,
            outlineVariant = outlineVariant.light,
            scrim = scrim.light,
        )

    val materialDarkColorScheme: ColorScheme
        get() = darkColorScheme(
            primary = primary.dark,
            onPrimary = onPrimary.dark,
            primaryContainer = primaryContainer.dark,
            onPrimaryContainer = onPrimaryContainer.dark,
            inversePrimary = inversePrimary.dark,
            secondary = secondary.dark,
            onSecondary = onSecondary.dark,
            secondaryContainer = secondaryContainer.dark,
            onSecondaryContainer = onSecondaryContainer.dark,
            tertiary = tertiary.dark,
            onTertiary = onTertiary.dark,
            tertiaryContainer = tertiaryContainer.dark,
            onTertiaryContainer = onTertiaryContainer.dark,
            background = background.dark,
            onBackground = onBackground.dark,
            surface = surface.dark,
            onSurface = onSurface.dark,
            surfaceVariant = surfaceVariant.dark,
            onSurfaceVariant = onSurfaceVariant.dark,
            surfaceTint = surfaceTint.dark,
            inverseSurface = inverseSurface.dark,
            inverseOnSurface = inverseOnSurface.dark,
            error = error.dark,
            onError = onError.dark,
            errorContainer = errorContainer.dark,
            onErrorContainer = onErrorContainer.dark,
            outline = outline.dark,
            outlineVariant = outlineVariant.dark,
            scrim = scrim.dark,
        )
}

data class OudsSemanticColorValue(val light: Color, val dark: Color)

enum class OudsSemanticColorToken {
    Background,
    Error,
    ErrorContainer,
    InverseOnSurface,
    InversePrimary,
    InverseSurface,
    OnBackground,
    OnError,
    OnErrorContainer,
    OnPrimary,
    OnPrimaryContainer,
    OnSecondary,
    OnSecondaryContainer,
    OnSurface,
    OnSurfaceVariant,
    OnTertiary,
    OnTertiaryContainer,
    Outline,
    OutlineVariant,
    Primary,
    PrimaryContainer,
    Scrim,
    Secondary,
    SecondaryContainer,
    Surface,
    SurfaceTint,
    SurfaceVariant,
    Tertiary,
    TertiaryContainer,
}
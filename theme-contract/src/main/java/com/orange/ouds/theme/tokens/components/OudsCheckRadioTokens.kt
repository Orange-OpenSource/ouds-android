//
// Software Name: OUDS Android
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Software description: Android library of reusable graphical components
//

// Tokens version 0.5.0
// Generated by Tokenator

package com.orange.ouds.theme.tokens.components

import com.orange.ouds.theme.tokens.OudsBorderKeyToken
import com.orange.ouds.theme.tokens.OudsColorKeyToken
import com.orange.ouds.theme.tokens.OudsOpacityKeyToken
import com.orange.ouds.theme.tokens.OudsSizeKeyToken
import com.orange.ouds.tokens.global.raw.DimensionRawTokens

open class OudsCheckRadioTokens(
    val borderRadiusCheckbox: OudsBorderKeyToken.Radius = OudsBorderKeyToken.Radius.Default,
    val borderWidthSelected: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    val borderWidthSelectedFocus: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    val borderWidthSelectedHover: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    val borderWidthSelectedPressed: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    val borderWidthUnselected: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Thin,
    val borderWidthUnselectedFocus: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    val borderWidthUnselectedHover: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    val borderWidthUnselectedPressed: OudsBorderKeyToken.Width = OudsBorderKeyToken.Width.Medium,
    val colorContentAssetDisabled: OudsColorKeyToken = OudsColorKeyToken.Action.Disabled,
    val colorContentAssetEnabled: OudsColorKeyToken = OudsColorKeyToken.Action.Enabled,
    val colorContentAssetErrorEnabled: OudsColorKeyToken = OudsColorKeyToken.Action.Negative.Enabled,
    val colorContentAssetErrorFocus: OudsColorKeyToken = OudsColorKeyToken.Action.Negative.Focus,
    val colorContentAssetErrorHover: OudsColorKeyToken = OudsColorKeyToken.Action.Negative.Hover,
    val colorContentAssetErrorPressed: OudsColorKeyToken = OudsColorKeyToken.Action.Negative.Pressed,
    val colorContentAssetFocus: OudsColorKeyToken = OudsColorKeyToken.Action.Focus,
    val colorContentAssetHover: OudsColorKeyToken = OudsColorKeyToken.Action.Hover,
    val colorContentAssetPressed: OudsColorKeyToken = OudsColorKeyToken.Action.Pressed,
    val colorContentAssetSelected: OudsColorKeyToken = OudsColorKeyToken.Action.Selected,
    val opacitySelectorBgSelected: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val opacitySelectorBgSelectedFocus: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val opacitySelectorBgSelectedHover: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val opacitySelectorBgSelectedPressed: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val opacitySelectorBgUnselected: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val opacitySelectorBgUnselectedFocus: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val opacitySelectorBgUnselectedHover: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val opacitySelectorBgUnselectedPressed: OudsOpacityKeyToken = OudsOpacityKeyToken.Invisible,
    val sizeCheckInnerAsset: OudsSizeKeyToken.Icon = OudsSizeKeyToken.Icon.Decorative.ExtraExtraSmall,
    val sizeMaxHeightAssetsContainer: Float = DimensionRawTokens.dimension1200,
    val sizeMaxHeightSelectorOnly: Float = DimensionRawTokens.dimension600,
    val sizeMinHeightSelectorOnly: Float = DimensionRawTokens.dimension600,
    val sizeMinWidthSelectorOnly: Float = DimensionRawTokens.dimension600,
    val sizeRadioInnerCircle: OudsSizeKeyToken.Icon = OudsSizeKeyToken.Icon.Decorative.ExtraExtraSmall,
    val sizeSelector: OudsSizeKeyToken.Icon = OudsSizeKeyToken.Icon.WithLabel.Large.SizeExtraSmall
)

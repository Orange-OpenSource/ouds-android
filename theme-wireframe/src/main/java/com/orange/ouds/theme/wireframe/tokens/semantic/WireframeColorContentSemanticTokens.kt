//
// Software Name: OUDS Android
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Software description: Android library of reusable graphical components
//

// Wireframe brand tokens version 2.1.0
// Generated by Tokenator

package com.orange.ouds.theme.wireframe.tokens.semantic

import androidx.compose.ui.graphics.Color
import com.orange.ouds.theme.wireframe.tokens.raw.WireframeColorRawTokens
import com.orange.ouds.theme.tokens.semantic.OudsColorContentSemanticTokens
import com.orange.ouds.tokens.raw.ColorRawTokens

data class WireframeColorContentSemanticTokens(
    override val contentBrandPrimaryDark: Color = WireframeColorRawTokens.colorRoyalBlue300,
    override val contentBrandPrimaryLight: Color = WireframeColorRawTokens.colorRoyalBlue600,
    override val contentBrandSecondaryDark: Color = WireframeColorRawTokens.colorRustyRed400,
    override val contentBrandSecondaryLight: Color = WireframeColorRawTokens.colorRustyRed600,
    override val contentBrandTertiaryDark: Color = Color(0x00ff0000),
    override val contentBrandTertiaryLight: Color = Color(0x00ff0000),
    override val contentDefaultDark: Color = WireframeColorRawTokens.colorFunctionalGrayLight160,
    override val contentDefaultLight: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentDisabledDark: Color = WireframeColorRawTokens.colorOpacityWhite200,
    override val contentDisabledLight: Color = WireframeColorRawTokens.colorOpacityBlack200,
    override val contentInverseDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentInverseLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentMutedDark: Color = WireframeColorRawTokens.colorOpacityWhite640,
    override val contentMutedLight: Color = WireframeColorRawTokens.colorOpacityBlack680,
    override val contentOnActionDisabledDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionDisabledLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnActionEnabledDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionEnabledLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnActionFocusDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionFocusLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnActionHighlightedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionHighlightedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnActionHoverDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionHoverLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnActionLoadingDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionLoadingLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnActionPressedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionPressedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnActionSelectedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnActionSelectedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnBrandPrimaryDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnBrandPrimaryLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnBrandSecondaryDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnBrandSecondaryLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnBrandTertiaryDark: Color = Color(0x00ff0000),
    override val contentOnBrandTertiaryLight: Color = Color(0x00ff0000),
    override val contentOnStatusAccentEmphasizedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusAccentEmphasizedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnStatusAccentMutedDark: Color = WireframeColorRawTokens.colorFunctionalGrayLight160,
    override val contentOnStatusAccentMutedLight: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusInfoEmphasizedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusInfoEmphasizedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnStatusInfoMutedDark: Color = WireframeColorRawTokens.colorFunctionalGrayLight160,
    override val contentOnStatusInfoMutedLight: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusNegativeEmphasizedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusNegativeEmphasizedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnStatusNegativeMutedDark: Color = WireframeColorRawTokens.colorFunctionalGrayLight160,
    override val contentOnStatusNegativeMutedLight: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusPositiveEmphasizedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusPositiveEmphasizedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val contentOnStatusPositiveMutedDark: Color = WireframeColorRawTokens.colorFunctionalGrayLight160,
    override val contentOnStatusPositiveMutedLight: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusWarningEmphasizedDark: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusWarningEmphasizedLight: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentOnStatusWarningMutedDark: Color = WireframeColorRawTokens.colorFunctionalGrayLight160,
    override val contentOnStatusWarningMutedLight: Color = WireframeColorRawTokens.colorFunctionalGrayDark960,
    override val contentStatusAccentDark: Color = WireframeColorRawTokens.colorRustyRed300,
    override val contentStatusAccentLight: Color = WireframeColorRawTokens.colorRustyRed600,
    override val contentStatusInfoDark: Color = ColorRawTokens.colorFunctionalDodgerBlue300,
    override val contentStatusInfoLight: Color = ColorRawTokens.colorFunctionalDodgerBlue700,
    override val contentStatusNegativeDark: Color = ColorRawTokens.colorFunctionalScarlet300,
    override val contentStatusNegativeLight: Color = ColorRawTokens.colorFunctionalScarlet600,
    override val contentStatusPositiveDark: Color = ColorRawTokens.colorFunctionalMalachite300,
    override val contentStatusPositiveLight: Color = ColorRawTokens.colorFunctionalMalachite750,
    override val contentStatusWarningDark: Color = ColorRawTokens.colorFunctionalSun300,
    override val contentStatusWarningLight: Color = ColorRawTokens.colorFunctionalSun750
) : OudsColorContentSemanticTokens

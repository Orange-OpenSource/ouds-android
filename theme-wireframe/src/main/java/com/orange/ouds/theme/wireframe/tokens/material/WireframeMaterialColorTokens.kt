//
// Software Name: OUDS Android
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Software description: Android library of reusable graphical components
//

// Android system tokens version 1.0.0
// Generated by Tokenator

package com.orange.ouds.theme.wireframe.tokens.material

import androidx.compose.ui.graphics.Color
import com.orange.ouds.theme.tokens.material.OudsMaterialColorTokens
import com.orange.ouds.tokens.raw.ColorRawTokens

data class WireframeMaterialColorTokens(
    override val backgroundDark: Color = WframeColorRawTokens.colorFunctionalGrayDark880,
    override val backgroundLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val errorContainerDark: Color = ColorRawTokens.colorFunctionalScarlet900,
    override val errorContainerLight: Color = ColorRawTokens.colorFunctionalScarlet100,
    override val errorDark: Color = ColorRawTokens.colorFunctionalScarlet300,
    override val errorLight: Color = ColorRawTokens.colorFunctionalScarlet600,
    override val inverseOnSurfaceDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val inverseOnSurfaceLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val inversePrimaryDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val inversePrimaryLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val inverseSurfaceDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val inverseSurfaceLight: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val onBackgroundDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onBackgroundLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onErrorContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onErrorContainerLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onErrorDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onErrorLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val onPrimaryContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onPrimaryContainerLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val onPrimaryDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onPrimaryFixedDark: Color = ColorRawTokens.colorFunctionalWhite,
    override val onPrimaryFixedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val onPrimaryFixedVariantDark: Color = WframeColorRawTokens.colorOpacityWhite640,
    override val onPrimaryFixedVariantLight: Color = WframeColorRawTokens.colorOpacityWhite640,
    override val onPrimaryLight: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onSecondaryContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onSecondaryContainerLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onSecondaryDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onSecondaryFixedDark: Color = ColorRawTokens.colorFunctionalWhite,
    override val onSecondaryFixedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val onSecondaryFixedVariantDark: Color = WframeColorRawTokens.colorOpacityWhite640,
    override val onSecondaryFixedVariantLight: Color = WframeColorRawTokens.colorOpacityWhite640,
    override val onSecondaryLight: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onSurfaceDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onSurfaceLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onSurfaceVariantDark: Color = WframeColorRawTokens.colorOpacityWhite640,
    override val onSurfaceVariantLight: Color = WframeColorRawTokens.colorOpacityBlack680,
    override val onTertiaryContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onTertiaryContainerLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onTertiaryDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val onTertiaryFixedDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onTertiaryFixedLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val onTertiaryFixedVariantDark: Color = WframeColorRawTokens.colorOpacityBlack680,
    override val onTertiaryFixedVariantLight: Color = WframeColorRawTokens.colorOpacityBlack680,
    override val onTertiaryLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val outlineDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val outlineLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val outlineVariantDark: Color = WframeColorRawTokens.colorOpacityWhite200,
    override val outlineVariantLight: Color = WframeColorRawTokens.colorOpacityBlack200,
    override val primaryContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val primaryContainerLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val primaryDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val primaryFixedDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val primaryFixedDimDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val primaryFixedDimLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val primaryFixedLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val primaryLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val scrimDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val scrimLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val secondaryContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val secondaryContainerLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val secondaryDark: Color = WframeColorRawTokens.colorFunctionalGrayLight160,
    override val secondaryFixedDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val secondaryFixedDimDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val secondaryFixedDimLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val secondaryFixedLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val secondaryLight: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val surfaceBrightDark: Color = WframeColorRawTokens.colorFunctionalGrayDark640,
    override val surfaceBrightLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val surfaceDark: Color = WframeColorRawTokens.colorFunctionalGrayDark880,
    override val surfaceDimDark: Color = WframeColorRawTokens.colorFunctionalGrayDark960,
    override val surfaceDimLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val surfaceLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val surfaceTintDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val surfaceTintLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val surfaceVariantDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val surfaceVariantLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val surfContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val surfContainerHighDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val surfContainerHighestDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val surfContainerHighestLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val surfContainerHighLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val surfContainerLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val surfContainerLowDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val surfContainerLowestDark: Color = WframeColorRawTokens.colorFunctionalGrayDark720,
    override val surfContainerLowestLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val surfContainerLowLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val tertiaryContainerDark: Color = WframeColorRawTokens.colorFunctionalGrayDark880,
    override val tertiaryContainerLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val tertiaryDark: Color = WframeColorRawTokens.colorFunctionalGrayDark880,
    override val tertiaryFixedDark: Color = ColorRawTokens.colorFunctionalWhite,
    override val tertiaryFixedDimDark: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val tertiaryFixedDimLight: Color = WframeColorRawTokens.colorFunctionalGrayLight80,
    override val tertiaryFixedLight: Color = ColorRawTokens.colorFunctionalWhite,
    override val tertiaryLight: Color = ColorRawTokens.colorFunctionalWhite
) : OudsMaterialColorTokens
